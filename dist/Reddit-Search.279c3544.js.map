{"version":3,"sources":["redditApi.js","../source/LocaleDataStore.js","../source/resolveLocale.js","../source/RelativeTimeFormat.js","node_modules/relative-time-format/index.js","../source/cache.js","../../source/gradation/helpers.js","../../source/gradation/canonical.js","../../source/gradation/convenient.js","../../source/gradation/index.js","../source/grade.js","../source/locale.js","../../source/style/time.js","../../source/style/twitter.js","../../source/style/default.js","../../source/style/index.js","../source/JavascriptTimeAgo.js","node_modules/javascript-time-ago/index.js","node_modules/numeral/numeral.js","node_modules/relative-time-format/locale/en/long.json","node_modules/relative-time-format/locale/en/short.json","node_modules/relative-time-format/locale/en/narrow.json","node_modules/relative-time-format/locale/en/quantify.js","node_modules/relative-time-format/locale/en/index.js","node_modules/javascript-time-ago/locale-more-styles/en/short-time.json","node_modules/javascript-time-ago/locale-more-styles/en/short-convenient.json","node_modules/javascript-time-ago/locale-more-styles/en/long-time.json","node_modules/javascript-time-ago/locale-more-styles/en/long-convenient.json","node_modules/javascript-time-ago/locale-more-styles/en/tiny.json","node_modules/javascript-time-ago/locale/en/index.js","index.js"],"names":["search","searchTerm","fetch","then","res","json","data","children","map","catch","err","console","log","defaultLocale","localesData","getDefaultLocale","setDefaultLocale","locale","getLocaleData","addLocaleData","localeData","Error","resolveLocale","options","localeMatcher","resolveLocaleLookup","RangeError","parts","split","length","pop","join","UNITS","NUMERIC_VALUES","STYLE_VALUES","RelativeTimeFormat","locales","numeric","style","indexOf","push","supportedLocalesOf","TypeError","Intl","NumberFormat","numberFormat","value","unit","getRule","replace","formatNumber","Math","abs","rule","valueIndex","type","slice","unitRules","message","current","quantifierRules","quantify","quantifier","other","number","format","String","filter","addLocale","Cache","cache","keys","key","lastKey","minute","hour","day","month","year","getStep","gradation","step","getDate","Date","factor","threshold","threshold_for_now","granularity","threshold_for_minute","grade","elapsed","now","units","convenient","getAllowedSteps","i","findGradationStep","amount","round","getThreshold","fromStep","toStep","id","undefined","JSON","stringify","chooseLocale","isLocaleDataAvailable","intlDateTimeFormatSupportedLocale","intlDateTimeFormatSupported","DateTimeFormat","isIntlAvailable","flavour","formatters","canonical","this_year","getFullYear","getTime","JavascriptTimeAgo","concat","relativeTimeFormatCache","input","defaultStyle","twitterStyle","timeStyle","getDateAndTimeBeingFormatted","date","time","custom","getTimeIntervalMeasurementUnits","error","getNowMessage","sign","getFormatter","formatValue","flavor","get","put","_","constructor","restrictedSetOfUnits","Object","second","unshift","past","future","TimeAgo","en","searchForm","document","getElementById","searchInput","list","grid","addEventListener","e","showMessage","preventDefault","innerHTML","results","output","forEach","post","ts","created","follow","subreddit_subscribers","image","preview","images","source","url","truncateText","title","author_fullname","num_comments","fill","className","div","createElement","appendChild","createTextNode","searchContainer","insertBefore","setTimeout","querySelector","remove","text","limit","shortened","substring"],"mappings":"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","file":"Reddit-Search.279c3544.js","sourceRoot":"..","sourcesContent":["export default{\r\n    search: function(searchTerm){\r\n     return fetch(`http://www.reddit.com/search.json?q=${searchTerm}&limit=100&sort=hot`)\r\n      .then(res => res.json())\r\n      .then(data => data.data.children.map(data =>\r\n          data.data)) \r\n      .catch(err => console.log(err))\r\n    }\r\n}","// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n// export function isLocaleDataAvailable(locale) {\r\n//  return localesData.hasOwnProperty(locale)\r\n// }\r\n\r\nexport function getLocaleData(locale) {\r\n  return localesData[locale]\r\n}\r\n\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n}","import {\r\n  getLocaleData\r\n} from './LocaleDataStore'\r\n\r\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * @param  {string} locale\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocale(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocale(\"xx-Latn\")\r\n */\r\nexport default function resolveLocale(locale, options = {}) {\r\n  const localeMatcher = options.localeMatcher || 'lookup'\r\n  switch (localeMatcher) {\r\n    case 'lookup':\r\n      return resolveLocaleLookup(locale)\r\n    // \"best fit\" locale matching is not supported.\r\n    // https://github.com/catamphetamine/relative-time-format/issues/2\r\n    case 'best fit':\r\n      // return resolveLocaleBestFit(locale)\r\n      return resolveLocaleLookup(locale)\r\n    default:\r\n      throw new RangeError(`Invalid \"localeMatcher\" option: ${localeMatcher}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * Starts from the most specific locale and gradually\r\n * falls back to less specific ones.\r\n * This is a basic implementation of the \"lookup\" algorithm.\r\n * https://tools.ietf.org/html/rfc4647#section-3.4\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocaleLookup(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocaleLookup(\"xx-Latn\")\r\n */\r\nexport function resolveLocaleLookup(locale) {\r\n  if (getLocaleData(locale)) {\r\n    return locale\r\n  }\r\n  // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n  const parts = locale.split('-')\r\n  while (locale.length > 1) {\r\n    parts.pop()\r\n    locale = parts.join('-')\r\n    if (getLocaleData(locale)) {\r\n      return locale\r\n    }\r\n  }\r\n}\r\n","import {\r\n  getDefaultLocale,\r\n  setDefaultLocale,\r\n  getLocaleData,\r\n  addLocaleData\r\n} from './LocaleDataStore'\r\n\r\nimport resolveLocale from './resolveLocale'\r\n\r\n// Valid time units.\r\nexport const UNITS = [\r\n  \"second\",\r\n  \"minute\",\r\n  \"hour\",\r\n  \"day\",\r\n  \"week\",\r\n  \"month\",\r\n  \"quarter\",\r\n  \"year\"\r\n]\r\n\r\n// Valid values for the `numeric` option.\r\nconst NUMERIC_VALUES = [\r\n  \"auto\",\r\n  \"always\"\r\n]\r\n\r\n// Valid values for the `style` option.\r\nconst STYLE_VALUES = [\r\n  \"long\",\r\n  \"short\",\r\n  \"narrow\"\r\n]\r\n\r\n/**\r\n * Polyfill for `Intl.RelativeTimeFormat` proposal.\r\n * https://github.com/tc39/proposal-intl-relative-time\r\n * https://github.com/tc39/proposal-intl-relative-time/issues/55\r\n */\r\nexport default class RelativeTimeFormat {\r\n  numeric = \"always\"\r\n  style = \"long\"\r\n  localeMatcher = \"lookup\"\r\n\r\n  /**\r\n   * @param {(string|string[])} [locales] - Preferred locales (or locale).\r\n   * @param {Object} [options] - Formatting options.\r\n   * @param {string} [options.style=\"long\"] - One of: \"long\", \"short\", \"narrow\".\r\n   * @param {string} [options.numeric=\"always\"] - (Version >= 2) One of: \"always\", \"auto\".\r\n   * @param {string} [options.localeMatcher=\"lookup\"] - One of: \"lookup\", \"best fit\". Currently only \"lookup\" is supported.\r\n   */\r\n  constructor(locales = [], options = {}) {\r\n    const {\r\n      numeric,\r\n      style,\r\n      localeMatcher\r\n    } = options\r\n\r\n    // Set `numeric` option.\r\n    if (numeric) {\r\n      if (NUMERIC_VALUES.indexOf(numeric) < 0) {\r\n        throw new RangeError(`Invalid \"numeric\" option: ${numeric}`)\r\n      }\r\n      this.numeric = numeric\r\n    }\r\n\r\n    // Set `style` option.\r\n    if (style) {\r\n      if (STYLE_VALUES.indexOf(style) < 0) {\r\n        throw new RangeError(`Invalid \"style\" option: ${style}`)\r\n      }\r\n      this.style = style\r\n    }\r\n\r\n    // Set `localeMatcher` option.\r\n    if (localeMatcher) {\r\n      this.localeMatcher = localeMatcher\r\n    }\r\n\r\n    // Set `locale`.\r\n    // Convert `locales` to an array.\r\n    if (typeof locales === 'string') {\r\n      locales = [locales]\r\n    }\r\n    // Add default locale.\r\n    locales.push(getDefaultLocale())\r\n    // Choose the most appropriate locale.\r\n    this.locale = RelativeTimeFormat.supportedLocalesOf(locales, {\r\n      localeMatcher: this.localeMatcher\r\n    })[0]\r\n    if (!this.locale) {\r\n      throw new TypeError(\"No supported locale was found\")\r\n    }\r\n    this.locale = resolveLocale(this.locale, {\r\n      localeMatcher: this.localeMatcher\r\n    })\r\n\r\n    // Use `Intl.NumberFormat` for formatting numbers (when available).\r\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n      this.numberFormat = new Intl.NumberFormat(this.locale)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats time `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"2 days ago\"\r\n   * rtf.format(-2, \"day\")\r\n   * // Returns \"in 5 minutes\"\r\n   * rtf.format(5, \"minute\")\r\n   */\r\n  format(value, unit) {\r\n    return this.getRule(value, unit).replace('{0}', this.formatNumber(Math.abs(value)))\r\n  }\r\n\r\n  /**\r\n   * Formats time `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {Object[]} The parts (`{ type, value }`).\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Version 1.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"day\", value: \"100\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   * //\r\n   * // Version 2.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"integer\", value: \"100\", unit: \"day\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   */\r\n  formatToParts(value, unit) {\r\n    const rule = this.getRule(value, unit)\r\n    const valueIndex = rule.indexOf(\"{0}\")\r\n    // \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (valueIndex < 0) {\r\n      return [{\r\n        type: \"literal\",\r\n        value: rule\r\n      }]\r\n    }\r\n    const parts = []\r\n    if (valueIndex > 0) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(0, valueIndex)\r\n      })\r\n    }\r\n    parts.push({\r\n      unit,\r\n      type: \"integer\",\r\n      value: this.formatNumber(Math.abs(value))\r\n    })\r\n    if (valueIndex + \"{0}\".length < rule.length - 1) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(valueIndex + \"{0}\".length)\r\n      })\r\n    }\r\n    return parts\r\n  }\r\n\r\n  /**\r\n   * Returns formatting rule for `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"{0} days ago\"\r\n   * getRule(-2, \"day\")\r\n   */\r\n  getRule(value, unit) {\r\n    if (UNITS.indexOf(unit) < 0) {\r\n      throw new RangeError(`Unknown time unit: ${unit}.`)\r\n    }\r\n    // Get locale-specific time interval formatting rules\r\n    // of a given `style` for the given value of measurement `unit`.\r\n    //\r\n    // E.g.:\r\n    //\r\n    // ```json\r\n    // {\r\n    //  \"past\": {\r\n    //    \"one\": \"a second ago\",\r\n    //    \"other\": \"{0} seconds ago\"\r\n    //  },\r\n    //  \"future\": {\r\n    //    \"one\": \"in a second\",\r\n    //    \"other\": \"in {0} seconds\"\r\n    //  }\r\n    // }\r\n    // ```\r\n    //\r\n    const unitRules = getLocaleData(this.locale)[this.style][unit]\r\n    // Special case for \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (this.numeric === \"auto\") {\r\n      // \"yesterday\", \"the day before yesterday\", etc.\r\n      if (value === -2 || value === -1) {\r\n        const message = unitRules[`previous${value === -1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"tomorrow\", \"the day after tomorrow\", etc.\r\n      else if (value === 1 || value === 2) {\r\n        const message = unitRules[`next${value === 1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"today\"\r\n      else if (value === 0) {\r\n        if (unitRules.current) {\r\n          return unitRules.current\r\n        }\r\n      }\r\n    }\r\n    // Choose either \"past\" or \"future\" based on time `value` sign.\r\n    // If there's only \"other\" then it's being collapsed.\r\n    // (the resulting bundle size optimization technique)\r\n    const quantifierRules = unitRules[value <= 0 ? \"past\" : \"future\"]\r\n    // Bundle size optimization technique.\r\n    if (typeof quantifierRules === \"string\") {\r\n      return quantifierRules\r\n    }\r\n    // Quantify `value`.\r\n    const quantify = getLocaleData(this.locale).quantify\r\n    let quantifier = quantify && quantify(Math.abs(value))\r\n    // There seems to be no such locale in CLDR\r\n    // for which `quantify` is missing\r\n    // and still `past` and `future` messages\r\n    // contain something other than \"other\".\r\n    /* istanbul ignore next */\r\n    quantifier = quantifier || 'other'\r\n    // \"other\" rule is supposed to be always present.\r\n    // If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n    return quantifierRules[quantifier] || quantifierRules.other\r\n  }\r\n\r\n  /**\r\n   * Formats a number into a string.\r\n   * Uses `Intl.NumberFormat` when available.\r\n   * @param  {number} number\r\n   * @return {string}\r\n   */\r\n  formatNumber(number) {\r\n    return this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n  }\r\n\r\n  /**\r\n   * Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\r\n   * @return {Object}\r\n   */\r\n  resolvedOptions() {\r\n    return {\r\n      locale: this.locale,\r\n      style: this.style,\r\n      numeric: this.numeric\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an array containing those of the provided locales\r\n * that are supported in collation without having to fall back\r\n * to the runtime's default locale.\r\n * @param {(string|string[])} locale - A string with a BCP 47 language tag, or an array of such strings. For the general form of the locales argument, see the Intl page.\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string[]} An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\r\n * @example\r\n * var locales = ['ban', 'id-u-co-pinyin', 'es-PY']\r\n * var options = { localeMatcher: 'lookup' }\r\n * // Returns [\"id\", \"es-PY\"]\r\n * Intl.RelativeTimeFormat.supportedLocalesOf(locales, options)\r\n */\r\nRelativeTimeFormat.supportedLocalesOf = function(locales, options = {}) {\r\n  // Convert `locales` to an array.\r\n  if (typeof locales === 'string') {\r\n    locales = [locales]\r\n  }\r\n  return locales.filter(locale => resolveLocale(locale, options))\r\n}\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nRelativeTimeFormat.addLocale = addLocaleData\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nRelativeTimeFormat.setDefaultLocale = setDefaultLocale\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nRelativeTimeFormat.getDefaultLocale = getDefaultLocale\r\n\r\n/**\r\n * Extracts language from an IETF BCP 47 language tag.\r\n * @param {string} languageTag - IETF BCP 47 language tag.\r\n * @return {string}\r\n * @example\r\n * // Returns \"he\"\r\n * getLanguageFromLanguageTag(\"he-IL-u-ca-hebrew-tz-jeruslm\")\r\n * // Returns \"ar\"\r\n * getLanguageFromLanguageTag(\"ar-u-nu-latn\")\r\n */\r\n// export function getLanguageFromLanguageTag(languageTag) {\r\n//   const hyphenIndex = languageTag.indexOf('-')\r\n//   if (hyphenIndex > 0) {\r\n//     return languageTag.slice(0, hyphenIndex)\r\n//   }\r\n//   return languageTag\r\n// }","export { default } from './modules/RelativeTimeFormat'","/**\r\n * A basic in-memory cache.\r\n *\r\n * import Cache from 'javascript-time-ago/Cache'\r\n * const cache = new Cache()\r\n * const object = cache.get('key1', 'key2', ...) || cache.put('key1', 'key2', ..., createObject())\r\n */\r\nexport default class Cache {\r\n\tcache = {}\r\n\r\n\tget(...keys) {\r\n\t\tlet cache = this.cache\r\n\t\tfor (const key of keys) {\r\n\t\t\tif (typeof cache !== 'object') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tcache = cache[key]\r\n\t\t}\r\n\t\treturn cache\r\n\t}\r\n\r\n\tput(...keys) {\r\n\t\tconst value = keys.pop()\r\n\t\tconst lastKey = keys.pop()\r\n\t\tlet cache = this.cache\r\n\t\tfor (const key of keys) {\r\n\t\t\tif (typeof cache[key] !== 'object') {\r\n\t\t\t\tcache[key] = {}\r\n\t\t\t}\r\n\t\t\tcache = cache[key]\r\n\t\t}\r\n\t\treturn cache[lastKey] = value\r\n\t}\r\n}","export const minute = 60 // in seconds\r\n\r\nexport const hour = 60 * minute // in seconds\r\n\r\nexport const day = 24 * hour // in seconds\r\n\r\n// https://www.quora.com/What-is-the-average-number-of-days-in-a-month\r\nexport const month = 30.44 * day // in seconds\r\n\r\n// \"400 years have 146097 days (taking into account leap year rules)\"\r\nexport const year = (146097 / 400) * day // in seconds\r\n\r\n/**\r\n * Returns a step of gradation corresponding to the unit.\r\n * @param  {Object[]} gradation\r\n * @param  {string} unit\r\n * @return {?Object}\r\n */\r\nexport function getStep(gradation, unit) {\r\n\tfor (const step of gradation) {\r\n\t\tif (step.unit === unit) {\r\n\t\t\treturn step\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts value to a `Date`\r\n * @param {(number|Date)} value\r\n * @return {Date}\r\n */\r\nexport function getDate(value) {\r\n\treturn value instanceof Date ? value : new Date(value)\r\n}","import { day, month, year } from './helpers'\r\n\r\n// just now\r\n// 1 second ago\r\n// 2 seconds ago\r\n// …\r\n// 59 seconds ago\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 hour ago\r\n// 2 hours ago\r\n// …\r\n// 24 hours ago\r\n// 1 day ago\r\n// 2 days ago\r\n// …\r\n// 7 days ago\r\n// 1 week ago\r\n// 2 weeks ago\r\n// …\r\n// 3 weeks ago\r\n// 1 month ago\r\n// 2 months ago\r\n// …\r\n// 11 months ago\r\n// 1 year ago\r\n// 2 years ago\r\n// …\r\nexport default\r\n[\r\n\t{\r\n\t\tfactor: 1,\r\n\t\tunit: 'now'\r\n\t},\r\n\t{\r\n\t\tthreshold: 0.5,\r\n\t\tfactor: 1,\r\n\t\tunit: 'second'\r\n\t},\r\n\t{\r\n\t\tthreshold: 59.5,\r\n\t\tfactor: 60,\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\tthreshold: 59.5 * 60,\r\n\t\tfactor: 60 * 60,\r\n\t\tunit: 'hour'\r\n\t},\r\n\t{\r\n\t\tthreshold: 23.5 * 60 * 60,\r\n\t\tfactor: day,\r\n\t\tunit: 'day'\r\n\t},\r\n\t{\r\n\t\tthreshold: 6.5 * day,\r\n\t\tfactor: 7 * day,\r\n\t\tunit: 'week'\r\n\t},\r\n\t{\r\n\t\tthreshold: 3.5 * 7 * day,\r\n\t\tfactor: month,\r\n\t\tunit: 'month'\r\n\t},\r\n\t{\r\n\t\tthreshold: 11.5 * month,\r\n\t\tfactor: year,\r\n\t\tunit: 'year'\r\n\t}\r\n]","import { day, month, year } from './helpers'\r\n\r\n// just now\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// 5 minutes ago\r\n// 10 minutes ago\r\n// 15 minutes ago\r\n// 20 minutes ago\r\n// an hour ago\r\n// 2 hours ago\r\n// …\r\n// 20 hours ago\r\n// a day ago\r\n// 2 days ago\r\n// 5 days ago\r\n// a week ago\r\n// 2 weeks ago\r\n// 3 weeks ago\r\n// a month ago\r\n// 2 months ago\r\n// 4 months ago\r\n// a year ago\r\n// 2 years ago\r\n// …\r\nexport default\r\n[\r\n\t{\r\n\t\tfactor: 1,\r\n\t\tunit: 'now'\r\n\t},\r\n\t{\r\n\t\tthreshold: 1,\r\n\t\tthreshold_for_now: 45,\r\n\t\tfactor: 1,\r\n\t\tunit: 'second'\r\n\t},\r\n\t{\r\n\t\tthreshold: 45,\r\n\t\tfactor: 60,\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\tthreshold: 2.5 * 60,\r\n\t\tfactor: 60,\r\n\t\tgranularity: 5,\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\tthreshold: 22.5 * 60,\r\n\t\tfactor: 30 * 60,\r\n\t\tunit: 'half-hour'\r\n\t},\r\n\t{\r\n\t\tthreshold: 42.5 * 60,\r\n\t\tthreshold_for_minute: 52.5 * 60,\r\n\t\tfactor: 60 * 60,\r\n\t\tunit: 'hour'\r\n\t},\r\n\t{\r\n\t\tthreshold: (20.5 / 24) * day,\r\n\t\tfactor: day,\r\n\t\tunit: 'day'\r\n\t},\r\n\t{\r\n\t\tthreshold: 5.5 * day,\r\n\t\tfactor: 7 * day,\r\n\t\tunit: 'week'\r\n\t},\r\n\t{\r\n\t\tthreshold: 3.5 * 7 * day,\r\n\t\tfactor: month,\r\n\t\tunit: 'month'\r\n\t},\r\n\t{\r\n\t\tthreshold: 10.5 * month,\r\n\t\tfactor: year,\r\n\t\tunit: 'year'\r\n\t}\r\n]","// A gradation is a mapping from a time interval (in seconds)\r\n// to the most appropriate time interval measurement unit\r\n// for describing it, along with the amount of such units.\r\n//\r\n// E.g. for \"canonical\" gradation:\r\n//\r\n// 0 -> 1 'now'\r\n// 0.5 -> 1 'second'\r\n// 60 -> 1 'minute'\r\n// 91 -> 2 'minute's\r\n// ...\r\n//\r\n// Each gradation unit can have:\r\n//\r\n// * unit - (required) The name of the time interval measurement unit.\r\n//\r\n// * factor - (required) The amount of seconds will be divided by this number for this unit.\r\n//\r\n// * granularity - A step for the unit's resulting \"amount\" value.\r\n//\r\n// * threshold - Min value (in seconds) for this unit. Is required for non-first unit.\r\n//\r\n// * threshold_for_[unit] - A specific threshold required for moving from `[unit]` to this unit.\r\n//                          E.g. if \"now\" unit is present in time units gradation\r\n//                          then `threshold_for_now` can be set to `45` seconds.\r\n//                          Otherwise, if \"now\" unit is omitted from time units gradation,\r\n//                          then `elapsed(0)` will output \"0 seconds\" because there's no `threshold`.\r\n//\r\n// A user can supply his own gradation.\r\n//\r\n// Don't name a gradation \"default\"\r\n// because that would conflict with the\r\n// CommonJS \"interoperability\" export layer.\r\n//\r\nexport { default as canonical } from './canonical'\r\nexport { default as convenient } from './convenient'\r\nexport { minute, hour, day, month, year, getStep, getDate } from './helpers'","import { convenient } from './gradation'\r\n\r\n/**\r\n * Takes seconds `elapsed` and measures them against\r\n * `gradation` to return the suitable `gradation` step.\r\n *\r\n * @param {number} elapsed - Time interval (in seconds)\r\n *\r\n * @param {string[]} units - A list of allowed time units\r\n *                           (e.g. ['second', 'minute', 'hour', …])\r\n *\r\n * @param {Object} [gradation] - Time scale gradation steps.\r\n *\r\n *                               E.g.:\r\n *                               [\r\n *                                 { unit: 'second', factor: 1 },\r\n *                                 { unit: 'minute', factor: 60, threshold: 60 },\r\n *                                 { format(), threshold: 24 * 60 * 60 },\r\n *                                 …\r\n *                               ]\r\n *\r\n * @return {?Object} `gradation` step.\r\n */\r\nexport default function grade(elapsed, now, units, gradation = convenient)\r\n{\r\n\t// Leave only allowed time measurement units.\r\n\t// E.g. omit \"quarter\" unit.\r\n\tgradation = getAllowedSteps(gradation, units)\r\n\r\n\t// If no steps of gradation fit the conditions\r\n\t// then return nothing.\r\n\tif (gradation.length === 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Find the most appropriate gradation step\r\n\tconst i = findGradationStep(elapsed, now, gradation)\r\n\tconst step = gradation[i]\r\n\r\n\t// If time elapsed is too small and even\r\n\t// the first gradation step doesn't suit it\r\n\t// then return nothing.\r\n\tif (i === -1) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Apply granularity to the time amount\r\n\t// (and fall back to the previous step\r\n\t//  if the first level of granularity\r\n\t//  isn't met by this amount)\r\n\tif (step.granularity) {\r\n\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\tconst amount = Math.round((elapsed / step.factor) / step.granularity) * step.granularity\r\n\t\t// If the granularity for this step\r\n\t\t// is too high, then fallback\r\n\t\t// to the previous step of gradation.\r\n\t\t// (if there is any previous step of gradation)\r\n\t\tif (amount === 0 && i > 0) {\r\n\t\t\treturn gradation[i - 1]\r\n\t\t}\r\n\t}\r\n\r\n\treturn step\r\n}\r\n\r\n/**\r\n * Gets threshold for moving from `fromStep` to `next_step`.\r\n * @param  {Object} fromStep - From step.\r\n * @param  {Object} next_step - To step.\r\n * @param  {number} now - The current timestamp.\r\n * @return {number}\r\n * @throws Will throw if no threshold is found.\r\n */\r\nfunction getThreshold(fromStep, toStep, now)\r\n{\r\n\tlet threshold\r\n\r\n\t// Allows custom thresholds when moving\r\n\t// from a specific step to a specific step.\r\n\tif (fromStep && (fromStep.id || fromStep.unit)) {\r\n\t\tthreshold = toStep[`threshold_for_${fromStep.id || fromStep.unit}`]\r\n\t}\r\n\r\n\t// If no custom threshold is set for this transition\r\n\t// then use the usual threshold for the next step.\r\n\tif (threshold === undefined) {\r\n\t\tthreshold = toStep.threshold\r\n\t}\r\n\r\n\t// Convert threshold to a number.\r\n\tif (typeof threshold === 'function') {\r\n\t\tthreshold = threshold(now)\r\n\t}\r\n\r\n\t// Throw if no threshold is found.\r\n\tif (fromStep && typeof threshold !== 'number') {\r\n\t\t// Babel transforms `typeof` into some \"branches\"\r\n\t\t// so istanbul will show this as \"branch not covered\".\r\n\t\t/* istanbul ignore next */\r\n\t\tconst type = typeof threshold\r\n\t\tthrow new Error(`Each step of a gradation must have a threshold defined except for the first one. Got \"${threshold}\", ${type}. Step: ${JSON.stringify(toStep)}`)\r\n\t}\r\n\r\n\treturn threshold\r\n}\r\n\r\n/**\r\n * @param  {number} elapsed - Time elapsed (in seconds).\r\n * @param  {number} now - Current timestamp.\r\n * @param  {Object} gradation - Gradation.\r\n * @param  {number} i - Gradation step currently being tested.\r\n * @return {number} Gradation step index.\r\n */\r\nfunction findGradationStep(elapsed, now, gradation, i = 0)\r\n{\r\n\t// If the threshold for moving from previous step\r\n\t// to this step is too high then return the previous step.\r\n\tif (elapsed < getThreshold(gradation[i - 1], gradation[i], now)) {\r\n\t\treturn i - 1\r\n\t}\r\n\t// If it's the last step of gradation then return it.\r\n\tif (i === gradation.length - 1) {\r\n\t\treturn i\r\n\t}\r\n\t// Move to the next step.\r\n\treturn findGradationStep(elapsed, now, gradation, i + 1)\r\n}\r\n\r\n/**\r\n * Leaves only allowed gradation steps.\r\n * @param  {Object[]} gradation\r\n * @param  {string[]} units - Allowed time units.\r\n * @return {Object[]}\r\n */\r\nfunction getAllowedSteps(gradation, units)\r\n{\r\n\treturn gradation.filter(({ unit }) => {\r\n\t\t// If this step has a `unit` defined\r\n\t\t// then this `unit` must be in the list of `units` allowed.\r\n\t\tif (unit) {\r\n\t\t\treturn units.indexOf(unit) >= 0\r\n\t\t}\r\n\t\t// A gradation step is not required to specify a `unit`.\r\n\t\t// E.g. for Twitter gradation it specifies `format()` instead.\r\n\t\treturn true\r\n\t})\r\n}","// Chooses the most appropriate locale\r\n// (one of the registered ones)\r\n// based on the list of preferred `locales` supplied by the user.\r\n//\r\n// @param {string[]} locales - the list of preferable locales (in [IETF format](https://en.wikipedia.org/wiki/IETF_language_tag)).\r\n// @param {Function} isLocaleDataAvailable - tests if a locale is available.\r\n//\r\n// @returns {string} The most suitable locale\r\n//\r\n// @example\r\n// // Returns 'en'\r\n// chooseLocale(['en-US'], undefined, (locale) => locale === 'ru' || locale === 'en')\r\n//\r\nexport default function chooseLocale(locales, isLocaleDataAvailable)\r\n{\r\n\t// This is not an intelligent algorythm,\r\n\t// but it will do for this library's case.\r\n\t// `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n\tfor (let locale of locales) {\r\n\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\treturn locale\r\n\t\t}\r\n\t\tconst parts = locale.split('-')\r\n\t\twhile (parts.length > 1) {\r\n\t\t\tparts.pop()\r\n\t\t\tlocale = parts.join('-')\r\n\t\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\t\treturn locale\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthrow new Error(`No locale data has been registered for any of the locales: ${locales.join(', ')}`)\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\r\nexport function intlDateTimeFormatSupportedLocale(locales) {\r\n\t/* istanbul ignore else */\r\n\tif (intlDateTimeFormatSupported()) {\r\n\t\treturn Intl.DateTimeFormat.supportedLocalesOf(locales)[0]\r\n\t}\r\n}\r\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\r\nexport function intlDateTimeFormatSupported() {\r\n\t// Babel transforms `typeof` into some \"branches\"\r\n\t// so istanbul will show this as \"branch not covered\".\r\n\t/* istanbul ignore next */\r\n\tconst isIntlAvailable = typeof Intl === 'object'\r\n\treturn isIntlAvailable && typeof Intl.DateTimeFormat === 'function'\r\n}","import { convenient } from '../gradation'\r\n\r\n// Similar to the default style but with \"ago\" omitted.\r\n//\r\n// just now\r\n// 5 minutes\r\n// 10 minutes\r\n// 15 minutes\r\n// 20 minutes\r\n// an hour\r\n// 2 hours\r\n// …\r\n// 20 hours\r\n// 1 day\r\n// 2 days\r\n// a week\r\n// 2 weeks\r\n// 3 weeks\r\n// a month\r\n// 2 months\r\n// 3 months\r\n// 4 months\r\n// a year\r\n// 2 years\r\n//\r\nexport default\r\n{\r\n\tgradation: convenient,\r\n\tflavour: 'long-time',\r\n\tunits:\r\n\t[\r\n\t\t'now',\r\n\t\t'minute',\r\n\t\t'hour',\r\n\t\t'day',\r\n\t\t'week',\r\n\t\t'month',\r\n\t\t'year'\r\n\t]\r\n}","import { canonical, day, hour, getStep, getDate } from '../gradation'\r\nimport { intlDateTimeFormatSupported } from '../locale'\r\n\r\n// A cache for `Intl.DateTimeFormat` twitter formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Twitter style relative time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n// Seconds, minutes and hours are shown relatively,\r\n// and other intervals can be shown using full date format.\r\nexport default\r\n{\r\n\t// Twitter gradation is derived from \"canonical\" gradation\r\n\t// adjusting its \"minute\" `threshold` to be 45.\r\n\tgradation: [\r\n\t\t// Minutes\r\n\t\t{\r\n\t\t\t...getStep(canonical, 'minute'),\r\n\t\t\tthreshold: 45\r\n\t\t},\r\n\t\t// Hours\r\n\t\tgetStep(canonical, 'hour'),\r\n\t\t// If `date` and `now` happened the same year,\r\n\t\t// then only output month and day.\r\n\t\t{\r\n\t\t\tthreshold: day - 0.5 * hour,\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].this_year) {\r\n\t\t\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\t\t\tformatters[locale].this_year = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output month and day.\r\n\t\t\t\treturn formatters[locale].this_year.format(getDate(value))\r\n\t\t\t}\r\n\t\t},\r\n\t\t// If `date` and `now` happened in defferent years,\r\n\t\t// then output day, month and year.\r\n\t\t{\r\n\t\t\tthreshold(now) {\r\n\t\t\t\t// Jan 1st of the next year.\r\n\t\t\t\tconst nextYear = new Date(new Date(now).getFullYear() + 1, 0)\r\n\t\t\t\treturn (nextYear.getTime() - now) / 1000\r\n\t\t\t},\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].other) {\r\n\t\t\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\t\t\tformatters[locale].other = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tyear  : 'numeric',\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output day, month and year.\r\n\t\t\t\treturn formatters[locale].other.format(getDate(value))\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\r\n\tflavour: [\r\n\t\t'tiny',\r\n\t\t'short-time',\r\n\t\t'narrow',\r\n\t\t'short'\r\n\t]\r\n}\r\n","import { convenient } from '../gradation'\r\n\r\nexport default\r\n{\r\n\tgradation: convenient,\r\n\tflavour: ['long-convenient', 'long'],\r\n\tunits:\r\n\t[\r\n\t\t'now',\r\n\t\t'minute',\r\n\t\t'hour',\r\n\t\t'day',\r\n\t\t'week',\r\n\t\t'month',\r\n\t\t'year'\r\n\t]\r\n}","// A preset (style) is an object having shape\r\n// `{ units, gradation, flavour, custom({ elapsed, time, date, now, locale }) }`.\r\n//\r\n// `date` parameter of `custom()` is not guaranteed to be set (can be inferred from `time`).\r\n//\r\nexport { default as timeStyle } from './time'\r\nexport { default as twitterStyle } from './twitter'\r\nexport { default as defaultStyle } from './default'","import RelativeTimeFormat from 'relative-time-format'\r\n\r\nimport Cache from './cache'\r\nimport grade from './grade'\r\nimport chooseLocale from './locale'\r\nimport { twitterStyle, timeStyle, defaultStyle } from './style'\r\n\r\nimport {\r\n\taddLocaleData,\r\n\tgetLocaleData\r\n} from './LocaleDataStore'\r\n\r\n// const EXTRA_STYLES = [\r\n// \t'long-convenient',\r\n// \t'long-time',\r\n// \t'short-convenient',\r\n// \t'short-time',\r\n// \t'tiny'\r\n// ]\r\n\r\n// Valid time units.\r\nconst UNITS = [\r\n\t'now',\r\n\t// The rest are the same as in `Intl.RelativeTimeFormat`.\r\n\t'second',\r\n\t'minute',\r\n\t'hour',\r\n\t'day',\r\n\t'week',\r\n\t'month',\r\n\t'quarter',\r\n\t'year'\r\n]\r\n\r\nexport default class JavascriptTimeAgo\r\n{\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t */\r\n\tconstructor(locales = [])\r\n\t{\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// (one of the previously added ones)\r\n\t\t// based on the list of preferred `locales` supplied by the user.\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(RelativeTimeFormat.getDefaultLocale()),\r\n\t\t\tgetLocaleData\r\n\t\t)\r\n\r\n\t\t// Use `Intl.NumberFormat` for formatting numbers (when available).\r\n\t\tif (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n\t\t\tthis.numberFormat = new Intl.NumberFormat(this.locale)\r\n\t\t}\r\n\r\n\t\t// Cache `Intl.RelativeTimeFormat` instance.\r\n\t\tthis.relativeTimeFormatCache = new Cache()\r\n\t}\r\n\r\n\t// Formats the relative date/time.\r\n\t//\r\n\t// @return {string} Returns the formatted relative date/time.\r\n\t//\r\n\t// @param {(Object|string)} [style] - Relative date/time formatting style.\r\n\t//\r\n\t// @param {string[]} [style.units] - A list of allowed time units\r\n\t//                                  (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\r\n\t//                                    If this function returns a value, then\r\n\t//                                    the `.format()` call will return that value.\r\n\t//                                    Otherwise it has no effect.\r\n\t//\r\n\t// @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\r\n\t//\r\n\t// @param {Object[]} [style.gradation] - Time scale gradation steps.\r\n\t//\r\n\t// @param {string} style.gradation[].unit - Time interval measurement unit.\r\n\t//                                          (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Number} style.gradation[].factor - Time interval measurement unit factor.\r\n\t//                                            (e.g. `60` for 'minute')\r\n\t//\r\n\t// @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\r\n\t//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\r\n\t//\r\n\t// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\r\n\t//                                                 (e.g. `45` seconds for 'minute').\r\n\t//                                                 There can also be specific `threshold_[unit]`\r\n\t//                                                 thresholds for fine-tuning.\r\n\t//\r\n\tformat(input, style = defaultStyle)\r\n\t{\r\n\t\tif (typeof style === 'string')\r\n\t\t{\r\n\t\t\tswitch (style)\r\n\t\t\t{\r\n\t\t\t\tcase 'twitter':\r\n\t\t\t\t\tstyle = twitterStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'time':\r\n\t\t\t\t\tstyle = timeStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstyle = defaultStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { date, time } = getDateAndTimeBeingFormatted(input)\r\n\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, localeData } = this.getLocaleData(style.flavour)\r\n\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t// Technically it doesn't belong to `style`\r\n\t\t// but since this is an undocumented internal feature,\r\n\t\t// taking it from the `style` argument will do (for now).\r\n\t\tconst now = style.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `gradation[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\t// I guess `custom` is deprecated and will be removed\r\n\t\t// in some future major version release.\r\n\t\t//\r\n\t\tif (style.custom)\r\n\t\t{\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate,\r\n\t\t\t\ttime,\r\n\t\t\t\telapsed,\r\n\t\t\t\tlocale : this.locale\r\n\t\t\t})\r\n\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(localeData, style.units)\r\n\t\t// If no available time unit is suitable, just output an empty string.\r\n\t\tif (units.length === 0) {\r\n\t\t\tconsole.error(`Units \"${units.join(', ')}\" were not found in locale data for \"${this.locale}\".`)\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst step = grade(\r\n\t\t\tMath.abs(elapsed),\r\n\t\t\tnow,\r\n\t\t\tunits,\r\n\t\t\tstyle.gradation\r\n\t\t)\r\n\r\n\t\t// If no time unit is suitable, just output an empty string.\r\n\t\t// E.g. when \"now\" unit is not available\r\n\t\t// and \"second\" has a threshold of `0.5`\r\n\t\t// (e.g. the \"canonical\" grading scale).\r\n\t\tif (!step) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(date || time, this.locale)\r\n\t\t}\r\n\r\n\t\tconst { unit, factor, granularity } = step\r\n\r\n\t\tlet amount = Math.abs(elapsed) / factor\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\tif (granularity) {\r\n\t\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\t\tamount = Math.round(amount / granularity) * granularity\r\n\t\t}\r\n\r\n\t\t// `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\r\n\t\tif (unit === 'now') {\r\n\t\t\treturn getNowMessage(localeData, -1 * Math.sign(elapsed))\r\n\t\t}\r\n\r\n\t\tswitch (flavour) {\r\n\t\t\tcase 'long':\r\n\t\t\tcase 'short':\r\n\t\t\tcase 'narrow':\r\n\t\t\t\t// Format `value` using `Intl.RelativeTimeFormat`.\r\n\t\t\t\treturn this.getFormatter(flavour).format(-1 * Math.sign(elapsed) * Math.round(amount), unit)\r\n\t\t\tdefault:\r\n\t\t\t\t// Format `value`.\r\n\t\t\t\t// (mimicks `Intl.RelativeTimeFormat` with the addition of extra styles)\r\n\t\t\t\treturn this.formatValue(-1 * Math.sign(elapsed) * Math.round(amount), unit, localeData)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n\t * @param  {number} value\r\n\t * @param  {string} unit\r\n\t * @param  {object} localeData — Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t */\r\n\tformatValue(value, unit, localeData) {\r\n\t\treturn this.getRule(value, unit, localeData).replace('{0}', this.formatNumber(Math.abs(value)))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatting rule for `value` in `units` (either in past or in future).\r\n\t * @param {number} value - Time interval value.\r\n\t * @param {string} unit - Time interval measurement unit.\r\n\t * @param  {object} localeData — Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t * @example\r\n\t * // Returns \"{0} days ago\"\r\n\t * getRule(-2, \"day\")\r\n\t */\r\n\tgetRule(value, unit, localeData) {\r\n\t\tconst unitRules = localeData[unit]\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof unitRules === 'string') {\r\n\t\t\treturn unitRules\r\n\t\t}\r\n\t\t// Choose either \"past\" or \"future\" based on time `value` sign.\r\n\t\t// If \"past\" is same as \"future\" then they're stored as \"other\".\r\n\t\t// If there's only \"other\" then it's being collapsed.\r\n\t\tconst quantifierRules = unitRules[value <= 0 ? 'past' : 'future'] || unitRules\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof quantifierRules === 'string') {\r\n\t\t\treturn quantifierRules\r\n\t\t}\r\n\t\t// Quantify `value`.\r\n\t\tconst quantify = getLocaleData(this.locale).quantify\r\n\t\tlet quantifier = quantify && quantify(Math.abs(value))\r\n\t\t// There seems to be no such locale in CLDR\r\n\t\t// for which `quantify` is missing\r\n\t\t// and still `past` and `future` messages\r\n\t\t// contain something other than \"other\".\r\n\t\t/* istanbul ignore next */\r\n\t\tquantifier = quantifier || 'other'\r\n\t\t// \"other\" rule is supposed to always be present.\r\n\t\t// If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n\t\treturn quantifierRules[quantifier] || quantifierRules.other\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a number into a string.\r\n\t * Uses `Intl.NumberFormat` when available.\r\n\t * @param  {number} number\r\n\t * @return {string}\r\n\t */\r\n\tformatNumber(number) {\r\n\t\treturn this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.RelativeTimeFormat` for a given `flavor`.\r\n\t * @param {string} flavor\r\n\t * @return {object} `Intl.RelativeTimeFormat` instance\r\n\t */\r\n\tgetFormatter(flavor) {\r\n\t\t// `Intl.RelativeTimeFormat` instance creation is assumed a\r\n\t\t// lengthy operation so the instances are cached and reused.\r\n\t\treturn this.relativeTimeFormatCache.get(this.locale, flavor) ||\r\n\t\t\tthis.relativeTimeFormatCache.put(this.locale, flavor, new RelativeTimeFormat(this.locale, { style: flavor }))\r\n\t}\r\n\r\n\t/**\r\n\t * Gets locale messages for this formatting flavour\r\n\t *\r\n\t * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n\t *                                      If it's an array then all flavours are tried in order.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { flavour, localeData }\r\n\t */\r\n\tgetLocaleData(flavour = []) {\r\n\t\t// Get relative time formatting rules for this locale\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\r\n\t\t// Convert `flavour` to an array.\r\n\t\tif (typeof flavour === 'string') {\r\n\t\t\tflavour = [flavour]\r\n\t\t}\r\n\r\n\t\t// \"long\" flavour is the default one.\r\n\t\t// (it's always present)\r\n\t\tflavour = flavour.concat('long')\r\n\r\n\t\t// Find a suitable flavour.\r\n\t\tfor (const _ of flavour) {\r\n\t\t\tif (localeData[_]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tflavour : _,\r\n\t\t\t\t\tlocaleData : localeData[_]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Can't happen - \"long\" flavour is always present.\r\n\t\t// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nJavascriptTimeAgo.getDefaultLocale = RelativeTimeFormat.getDefaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nJavascriptTimeAgo.setDefaultLocale = RelativeTimeFormat.setDefaultLocale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nJavascriptTimeAgo.addLocale = function(localeData) {\r\n\taddLocaleData(localeData)\r\n\tRelativeTimeFormat.addLocale(localeData)\r\n}\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getDateAndTimeBeingFormatted(input)\r\n{\r\n\tif (input.constructor === Date)\r\n\t{\r\n\t\treturn {\r\n\t\t\tdate : input,\r\n\t\t\ttime : input.getTime()\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof input === 'number')\r\n\t{\r\n\t\treturn {\r\n\t\t\ttime : input,\r\n\t\t\t// `date` is not required for formatting\r\n\t\t\t// relative times unless \"twitter\" preset is used.\r\n\t\t\t// date : new Date(input)\r\n\t\t}\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits)\r\n{\r\n\t// All available time interval measurement units.\r\n\tlet units = Object.keys(localeData)\r\n\r\n\t// If only a specific set of available\r\n\t// time measurement units can be used.\r\n\tif (restrictedSetOfUnits) {\r\n\t\t// Reduce available time interval measurement units\r\n\t\t// based on user's preferences.\r\n\t\tunits = restrictedSetOfUnits.filter(_ => units.indexOf(_) >= 0)\r\n\t}\r\n\r\n\t// Stock `Intl.RelativeTimeFormat` locale data doesn't have \"now\" units.\r\n\t// So either \"now\" is present in extended locale data\r\n\t// or it's taken from \".second.current\".\r\n\tif ((!restrictedSetOfUnits || restrictedSetOfUnits.indexOf('now') >= 0) &&\r\n\t\tunits.indexOf('now') < 0) {\r\n\t\tif (localeData.second.current) {\r\n\t\t\tunits.unshift('now')\r\n\t\t}\r\n\t}\r\n\r\n\treturn units\r\n}\r\n\r\nfunction getNowMessage(localeData, value) {\r\n\t// Specific \"now\" message form extended locale data (if present).\r\n\tif (localeData.now) {\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof localeData.now === 'string') {\r\n\t\t\treturn localeData.now\r\n\t\t}\r\n\t\t// Not handling `value === 0` as `localeData.now.current` here\r\n\t\t// because it wouldn't make sense: \"now\" is a moment,\r\n\t\t// so one can't possibly differentiate between a\r\n\t\t// \"previous\" moment, a \"current\" moment and a \"next moment\".\r\n\t\t// It can only be differentiated between \"past\" and \"future\".\r\n\t\tif (value <= 0) {\r\n\t\t\treturn localeData.now.past\r\n\t\t} else {\r\n\t\t\treturn localeData.now.future\r\n\t\t}\r\n\t}\r\n\t// Use \".second.current\" as \"now\" message.\r\n\treturn localeData.second.current\r\n\t// If this function was called then\r\n\t// it means that either \"now\" unit messages are\r\n\t// available or \".second.current\" message is present.\r\n}","export { default } from './modules/JavascriptTimeAgo'\r\n\r\nexport {\r\n\tintlDateTimeFormatSupported as intlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale as intlDateTimeFormatSupportedLocale\r\n} from './modules/locale'","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","module.exports={year:{previous:\"last year\",current:\"this year\",next:\"next year\",past:{one:\"{0} year ago\",other:\"{0} years ago\"},future:{one:\"in {0} year\",other:\"in {0} years\"}},quarter:{previous:\"last quarter\",current:\"this quarter\",next:\"next quarter\",past:{one:\"{0} quarter ago\",other:\"{0} quarters ago\"},future:{one:\"in {0} quarter\",other:\"in {0} quarters\"}},month:{previous:\"last month\",current:\"this month\",next:\"next month\",past:{one:\"{0} month ago\",other:\"{0} months ago\"},future:{one:\"in {0} month\",other:\"in {0} months\"}},week:{previous:\"last week\",current:\"this week\",next:\"next week\",past:{one:\"{0} week ago\",other:\"{0} weeks ago\"},future:{one:\"in {0} week\",other:\"in {0} weeks\"}},day:{previous:\"yesterday\",current:\"today\",next:\"tomorrow\",past:{one:\"{0} day ago\",other:\"{0} days ago\"},future:{one:\"in {0} day\",other:\"in {0} days\"}},hour:{current:\"this hour\",past:{one:\"{0} hour ago\",other:\"{0} hours ago\"},future:{one:\"in {0} hour\",other:\"in {0} hours\"}},minute:{current:\"this minute\",past:{one:\"{0} minute ago\",other:\"{0} minutes ago\"},future:{one:\"in {0} minute\",other:\"in {0} minutes\"}},second:{current:\"now\",past:{one:\"{0} second ago\",other:\"{0} seconds ago\"},future:{one:\"in {0} second\",other:\"in {0} seconds\"}}};","module.exports={year:{previous:\"last yr.\",current:\"this yr.\",next:\"next yr.\",past:\"{0} yr. ago\",future:\"in {0} yr.\"},quarter:{previous:\"last qtr.\",current:\"this qtr.\",next:\"next qtr.\",past:{one:\"{0} qtr. ago\",other:\"{0} qtrs. ago\"},future:{one:\"in {0} qtr.\",other:\"in {0} qtrs.\"}},month:{previous:\"last mo.\",current:\"this mo.\",next:\"next mo.\",past:\"{0} mo. ago\",future:\"in {0} mo.\"},week:{previous:\"last wk.\",current:\"this wk.\",next:\"next wk.\",past:\"{0} wk. ago\",future:\"in {0} wk.\"},day:{previous:\"yesterday\",current:\"today\",next:\"tomorrow\",past:{one:\"{0} day ago\",other:\"{0} days ago\"},future:{one:\"in {0} day\",other:\"in {0} days\"}},hour:{current:\"this hour\",past:\"{0} hr. ago\",future:\"in {0} hr.\"},minute:{current:\"this minute\",past:\"{0} min. ago\",future:\"in {0} min.\"},second:{current:\"now\",past:\"{0} sec. ago\",future:\"in {0} sec.\"}};","module.exports={year:{previous:\"last yr.\",current:\"this yr.\",next:\"next yr.\",past:\"{0} yr. ago\",future:\"in {0} yr.\"},quarter:{previous:\"last qtr.\",current:\"this qtr.\",next:\"next qtr.\",past:{one:\"{0} qtr. ago\",other:\"{0} qtrs. ago\"},future:{one:\"in {0} qtr.\",other:\"in {0} qtrs.\"}},month:{previous:\"last mo.\",current:\"this mo.\",next:\"next mo.\",past:\"{0} mo. ago\",future:\"in {0} mo.\"},week:{previous:\"last wk.\",current:\"this wk.\",next:\"next wk.\",past:\"{0} wk. ago\",future:\"in {0} wk.\"},day:{previous:\"yesterday\",current:\"today\",next:\"tomorrow\",past:{one:\"{0} day ago\",other:\"{0} days ago\"},future:{one:\"in {0} day\",other:\"in {0} days\"}},hour:{current:\"this hour\",past:\"{0} hr. ago\",future:\"in {0} hr.\"},minute:{current:\"this minute\",past:\"{0} min. ago\",future:\"in {0} min.\"},second:{current:\"now\",past:\"{0} sec. ago\",future:\"in {0} sec.\"}};","module.exports=function(n){var r=!String(n).split(\".\")[1];return 1==n&&r?\"one\":\"other\"}","module.exports = {\n\tlocale: 'en',\n\tlong: require('./long.json'),\n\tshort: require('./short.json'),\n\tnarrow: require('./narrow.json'),\n\tquantify: require('./quantify')\n}","module.exports={year:\"{0} yr.\",month:\"{0} mo.\",week:\"{0} wk.\",day:{one:\"{0} day\",other:\"{0} days\"},hour:\"{0} hr.\",minute:\"{0} min.\",second:\"{0} sec.\",now:\"now\"};","module.exports={year:{previous:\"last yr.\",current:\"this yr.\",next:\"next yr.\",past:\"{0} yr. ago\",future:\"in {0} yr.\"},quarter:{previous:\"last qtr.\",current:\"this qtr.\",next:\"next qtr.\",past:{one:\"{0} qtr. ago\",other:\"{0} qtrs. ago\"},future:{one:\"in {0} qtr.\",other:\"in {0} qtrs.\"}},month:{previous:\"last mo.\",current:\"this mo.\",next:\"next mo.\",past:\"{0} mo. ago\",future:\"in {0} mo.\"},week:{previous:\"last wk.\",current:\"this wk.\",next:\"next wk.\",past:\"{0} wk. ago\",future:\"in {0} wk.\"},day:{previous:\"yesterday\",current:\"today\",next:\"tomorrow\",past:{one:\"{0} day ago\",other:\"{0} days ago\"},future:{one:\"in {0} day\",other:\"in {0} days\"}},hour:{current:\"this hour\",past:\"{0} hr. ago\",future:\"in {0} hr.\"},minute:{current:\"this minute\",past:\"{0} min. ago\",future:\"in {0} min.\"},second:{current:\"now\",past:\"{0} sec. ago\",future:\"in {0} sec.\"},now:{future:\"in a moment\",past:\"just now\"}};","module.exports={year:{one:\"{0} year\",other:\"{0} years\"},month:{one:\"{0} month\",other:\"{0} months\"},week:{one:\"{0} week\",other:\"{0} weeks\"},day:{one:\"{0} day\",other:\"{0} days\"},hour:{one:\"{0} hour\",other:\"{0} hours\"},minute:{one:\"{0} minute\",other:\"{0} minutes\"},second:{one:\"{0} second\",other:\"{0} seconds\"},now:{future:\"in a moment\",past:\"just now\"}};","module.exports={year:{previous:\"last year\",current:\"this year\",next:\"next year\",past:{one:\"a year ago\",other:\"{0} years ago\"},future:{one:\"in a year\",other:\"in {0} years\"}},quarter:{previous:\"last quarter\",current:\"this quarter\",next:\"next quarter\",past:{one:\"a quarter ago\",other:\"{0} quarters ago\"},future:{one:\"in a quarter\",other:\"in {0} quarters\"}},month:{previous:\"last month\",current:\"this month\",next:\"next month\",past:{one:\"a month ago\",other:\"{0} months ago\"},future:{one:\"in a month\",other:\"in {0} months\"}},week:{previous:\"last week\",current:\"this week\",next:\"next week\",past:{one:\"a week ago\",other:\"{0} weeks ago\"},future:{one:\"in a week\",other:\"in {0} weeks\"}},day:{previous:\"yesterday\",current:\"today\",next:\"tomorrow\",past:{one:\"a day ago\",other:\"{0} days ago\"},future:{one:\"in a day\",other:\"in {0} days\"}},hour:{current:\"this hour\",past:{one:\"an hour ago\",other:\"{0} hours ago\"},future:{one:\"in an hour\",other:\"in {0} hours\"}},minute:{current:\"this minute\",past:{one:\"a minute ago\",other:\"{0} minutes ago\"},future:{one:\"in a minute\",other:\"in {0} minutes\"}},second:{current:\"now\",past:{one:\"a second ago\",other:\"{0} seconds ago\"},future:{one:\"in a second\",other:\"in {0} seconds\"}},now:{future:\"in a moment\",past:\"just now\"}};","module.exports={year:\"{0}yr\",month:\"{0}mo\",week:\"{0}wk\",day:\"{0}d\",hour:\"{0}h\",minute:\"{0}m\",second:\"{0}s\",now:\"now\"};","var locale = require('relative-time-format/locale/en')\n\nmodule.exports = {\n\tlocale: locale.locale,\n\t// Standard styles.\n\tlong: locale.long,\n\tshort: locale.short,\n\tnarrow: locale.narrow,\n\t// Additional styles.\n\t'short-time': require('../../locale-more-styles/en/short-time.json'),\n\t'short-convenient': require('../../locale-more-styles/en/short-convenient.json'),\n\t'long-time': require('../../locale-more-styles/en/long-time.json'),\n\t'long-convenient': require('../../locale-more-styles/en/long-convenient.json'),\n\t'tiny': require('../../locale-more-styles/en/tiny.json'),\n\t// Quantifier.\n\tquantify: locale.quantify\n}","import reddit from './redditApi';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport numeral from 'numeral';\r\n \r\n// Load locale-specific relative date/time formatting rules.\r\nimport en from 'javascript-time-ago/locale/en'\r\n \r\n// Add locale-specific relative date/time formatting rules.\r\nTimeAgo.addLocale(en)\r\n\r\nconst searchForm = document.getElementById('search-form');\r\nconst searchInput = document.getElementById('search-input');\r\nconst list = document.getElementById('list');\r\nconst grid = document.getElementById('grid');\r\n\r\nsearchForm.addEventListener('submit', e =>{\r\n    // Get search term\r\n    const searchTerm = searchInput.value;\r\n    if(searchTerm === ''){\r\n        showMessage('Please add a search term');\r\n    }\r\n    e.preventDefault();\r\n//Clear input\r\nsearchInput.value='';\r\n//Adding an loader before data view\r\nlet loader = `<div id=\"loading\" class=\"loading\"> Loading&#8230; </div>`;\r\ndocument.getElementById('results').innerHTML = loader;\r\n\r\n//Search Reddit\r\nreddit.search(searchTerm)\r\n.then(results => {\r\n    console.log(results);\r\n    //List\r\n    let output = '<div class=\"result\">';\r\n    results.forEach(post => {\r\n        const ts = new Date(post.created);\r\n        const timeAgo = new TimeAgo('en-US');\r\n        const date = timeAgo.format(Date.now() - ts ) ;\r\n        const follow = numeral(post.subreddit_subscribers).format('0a');     \r\n        const image = post.preview ? post.preview.images[0].source.url : \"https://secure.webtoolhub.com/static/resources/icons/set26/1bc50a8d1fed.png\";\r\n        output += `\r\n        <div class=\"card\" id='list-card'>\r\n        <div class=\"card-body\">\r\n        <img src=\"${image}\" class=\"img\" alt=\"...\">\r\n          <div class='content'>\r\n          <p class=\"card-text\" id='header'>${truncateText(post.title, 80)}</p>\r\n          <p class=\"card-text\" id='p'>submitted ${date} by <a href = \"\"> ${post.author_fullname}</a></p>\r\n          <div class=\"comment-subscribe\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\r\nwidth=\"18\" height=\"18\"\r\nviewBox=\"0 0 172 172\"\r\nstyle=\" fill:#000000;\"><g fill=\"none\" fill-rule=\"nonzero\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" stroke-miterlimit=\"10\" stroke-dasharray=\"\" stroke-dashoffset=\"0\" font-family=\"none\" font-weight=\"none\" font-size=\"none\" text-anchor=\"none\" style=\"mix-blend-mode: normal\"><path d=\"M0,172v-172h172v172z\" fill=\"none\"></path><g fill=\"#e74c3c\"><g id=\"surface1\"><path d=\"M86,14.00188c-43.45687,0 -78.87812,30.44937 -78.87812,68.55812c0,22.11813 12.12062,41.37406 30.73156,53.965c-0.02687,0.73906 0.02688,1.935 -0.94062,5.53625c-1.20938,4.44781 -3.64156,10.72313 -8.57313,17.79125l-3.50719,5.02563h6.1275c21.23125,0 33.51313,-13.84063 35.42125,-16.05781c6.31563,1.47812 12.81938,2.29781 19.61875,2.29781c43.45688,0 78.87813,-30.44938 78.87813,-68.55813c0,-38.10875 -35.42125,-68.55812 -78.87813,-68.55812zM86,20.39813c40.48719,0 72.48188,28.03062 72.48188,62.16187c0,34.13125 -31.99469,62.16188 -72.48188,62.16188c-7.01437,0 -13.62562,-0.67188 -19.83375,-2.29781l-1.98875,-0.52406l-1.30344,1.59906c0,0 -9.93031,11.20687 -25.78656,13.90781c2.87563,-5.18688 4.99875,-10.02438 5.97969,-13.67938c1.38406,-5.09281 1.41094,-8.53281 1.41094,-8.53281v-1.76031l-1.47813,-0.94063c-18.1675,-11.55625 -29.48187,-29.44156 -29.48187,-49.93375c0,-34.13125 31.99469,-62.16187 72.48187,-62.16187zM51.6,75.68c-3.80281,0 -6.88,3.07719 -6.88,6.88c0,3.80281 3.07719,6.88 6.88,6.88c3.80281,0 6.88,-3.07719 6.88,-6.88c0,-3.80281 -3.07719,-6.88 -6.88,-6.88zM86,75.68c-3.80281,0 -6.88,3.07719 -6.88,6.88c0,3.80281 3.07719,6.88 6.88,6.88c3.80281,0 6.88,-3.07719 6.88,-6.88c0,-3.80281 -3.07719,-6.88 -6.88,-6.88zM120.4,75.68c-3.80281,0 -6.88,3.07719 -6.88,6.88c0,3.80281 3.07719,6.88 6.88,6.88c3.80281,0 6.88,-3.07719 6.88,-6.88c0,-3.80281 -3.07719,-6.88 -6.88,-6.88z\"></path></g></g></g></svg> \r\n${post.num_comments} comments\r\n   <svg id=\"subscribe\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\r\nwidth=\"18\" height=\"18\"\r\nviewBox=\"0 0 172 172\"\r\nstyle=\" fill:#000000;\"><g fill=\"none\" fill-rule=\"nonzero\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" stroke-miterlimit=\"10\" stroke-dasharray=\"\" stroke-dashoffset=\"0\" font-family=\"none\" font-weight=\"none\" font-size=\"none\" text-anchor=\"none\" style=\"mix-blend-mode: normal\"><path d=\"M0,172v-172h172v172z\" fill=\"none\"></path><g fill=\"#e74c3c\"><path d=\"M21.5,21.5c-7.83362,0 -14.33333,6.49972 -14.33333,14.33333v93.16667h14.33333v-93.16667h114.66667v-14.33333zM50.16667,50.16667c-7.90483,0 -14.33333,6.4285 -14.33333,14.33333v71.66667c0,7.90483 6.4285,14.33333 14.33333,14.33333h55.59765l2.09961,-2.09961l5.06706,-5.06706l-5.06706,-5.06706l-2.09961,-2.09961h-55.59765v-52.84017l50.16667,31.34017l50.16667,-31.34017l0.014,22.43782l14.31934,-14.33333v-26.93099c0,-7.90483 -6.4285,-14.33333 -14.33333,-14.33333zM50.16667,64.5h100.33333v4.49316l-50.16667,31.34017l-50.16667,-31.34017zM128.13216,117.99805l-10.13411,10.13411l15.20117,15.20117l-15.20117,15.20117l10.13411,10.13411l15.20117,-15.20117l15.20117,15.20117l10.13411,-10.13411l-15.20117,-15.20117l15.20117,-15.20117l-10.13411,-10.13411l-15.20117,15.20117z\"></path></g></g></svg>          \r\n${follow} subscribers\r\n          </div>\r\n          </div>\r\n          <p id='domain'>\r\n        <a href=\"${post.url}\" target=\"_blank\" class=\"btn btn-light\">Readit</a>\r\n           </p>\r\n        </div>\r\n      </div>\r\n        `\r\n    })\r\n    output += '</div>';\r\n    document.getElementById('results').innerHTML = output;    \r\n    list.addEventListener('click', e =>{\r\n        document.getElementById(\"grid-svg\").style.fill = \"rgb(200, 200, 200)\";\r\n        document.getElementById(\"list-svg\").style.fill = \"black\";\r\n        document.getElementById('results').innerHTML = output;\r\n    })\r\n\r\n    //Grid\r\n    grid.addEventListener('click', e =>{\r\n        document.getElementById(\"grid-svg\").style.fill = \"black\";\r\n        document.getElementById(\"list-svg\").style.fill = \"rgb(200, 200, 200)\";\r\n        let output = '<div class=\"card-columns\">';\r\n    results.forEach(post => {\r\n        const ts = new Date(post.created);\r\n        const timeAgo = new TimeAgo('en-US');\r\n        const date = timeAgo.format(Date.now() - ts ) ;\r\n        const follow = numeral(post.subreddit_subscribers).format('0a');     \r\n        const image = post.preview ? post.preview.images[0].source.url : \"https://secure.webtoolhub.com/static/resources/icons/set26/1bc50a8d1fed.png\";\r\n        output += `\r\n        <div class=\"card\" id=\"grid-card\">\r\n        <p class=\"card-title\" id=\"submit\">submitted ${date} by <a href = \"\"> ${post.author_fullname}</a></p>\r\n        <h5 class=\"card-title\">${truncateText(post.title, 80)}</h5>\r\n        <img src=\"${image}\" class=\"card-img-top\" alt=\"...\">\r\n        <a href=\"${post.url}\" target=\"_blank\" class=\"card-body\">\r\n        <div class=\"comment-subscribe\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\r\nwidth=\"18\" height=\"18\"\r\nviewBox=\"0 0 172 172\"\r\nstyle=\" fill:#000000;\"><g fill=\"none\" fill-rule=\"nonzero\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" stroke-miterlimit=\"10\" stroke-dasharray=\"\" stroke-dashoffset=\"0\" font-family=\"none\" font-weight=\"none\" font-size=\"none\" text-anchor=\"none\" style=\"mix-blend-mode: normal\"><path d=\"M0,172v-172h172v172z\" fill=\"none\"></path><g fill=\"#e74c3c\"><g id=\"surface1\"><path d=\"M86,14.00188c-43.45687,0 -78.87812,30.44937 -78.87812,68.55812c0,22.11813 12.12062,41.37406 30.73156,53.965c-0.02687,0.73906 0.02688,1.935 -0.94062,5.53625c-1.20938,4.44781 -3.64156,10.72313 -8.57313,17.79125l-3.50719,5.02563h6.1275c21.23125,0 33.51313,-13.84063 35.42125,-16.05781c6.31563,1.47812 12.81938,2.29781 19.61875,2.29781c43.45688,0 78.87813,-30.44938 78.87813,-68.55813c0,-38.10875 -35.42125,-68.55812 -78.87813,-68.55812zM86,20.39813c40.48719,0 72.48188,28.03062 72.48188,62.16187c0,34.13125 -31.99469,62.16188 -72.48188,62.16188c-7.01437,0 -13.62562,-0.67188 -19.83375,-2.29781l-1.98875,-0.52406l-1.30344,1.59906c0,0 -9.93031,11.20687 -25.78656,13.90781c2.87563,-5.18688 4.99875,-10.02438 5.97969,-13.67938c1.38406,-5.09281 1.41094,-8.53281 1.41094,-8.53281v-1.76031l-1.47813,-0.94063c-18.1675,-11.55625 -29.48187,-29.44156 -29.48187,-49.93375c0,-34.13125 31.99469,-62.16187 72.48187,-62.16187zM51.6,75.68c-3.80281,0 -6.88,3.07719 -6.88,6.88c0,3.80281 3.07719,6.88 6.88,6.88c3.80281,0 6.88,-3.07719 6.88,-6.88c0,-3.80281 -3.07719,-6.88 -6.88,-6.88zM86,75.68c-3.80281,0 -6.88,3.07719 -6.88,6.88c0,3.80281 3.07719,6.88 6.88,6.88c3.80281,0 6.88,-3.07719 6.88,-6.88c0,-3.80281 -3.07719,-6.88 -6.88,-6.88zM120.4,75.68c-3.80281,0 -6.88,3.07719 -6.88,6.88c0,3.80281 3.07719,6.88 6.88,6.88c3.80281,0 6.88,-3.07719 6.88,-6.88c0,-3.80281 -3.07719,-6.88 -6.88,-6.88z\"></path></g></g></g></svg> \r\n${post.num_comments} comments\r\n   <svg id=\"subscribe\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\r\nwidth=\"18\" height=\"18\"\r\nviewBox=\"0 0 172 172\"\r\nstyle=\" fill:#000000;\"><g fill=\"none\" fill-rule=\"nonzero\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" stroke-miterlimit=\"10\" stroke-dasharray=\"\" stroke-dashoffset=\"0\" font-family=\"none\" font-weight=\"none\" font-size=\"none\" text-anchor=\"none\" style=\"mix-blend-mode: normal\"><path d=\"M0,172v-172h172v172z\" fill=\"none\"></path><g fill=\"#e74c3c\"><path d=\"M21.5,21.5c-7.83362,0 -14.33333,6.49972 -14.33333,14.33333v93.16667h14.33333v-93.16667h114.66667v-14.33333zM50.16667,50.16667c-7.90483,0 -14.33333,6.4285 -14.33333,14.33333v71.66667c0,7.90483 6.4285,14.33333 14.33333,14.33333h55.59765l2.09961,-2.09961l5.06706,-5.06706l-5.06706,-5.06706l-2.09961,-2.09961h-55.59765v-52.84017l50.16667,31.34017l50.16667,-31.34017l0.014,22.43782l14.31934,-14.33333v-26.93099c0,-7.90483 -6.4285,-14.33333 -14.33333,-14.33333zM50.16667,64.5h100.33333v4.49316l-50.16667,31.34017l-50.16667,-31.34017zM128.13216,117.99805l-10.13411,10.13411l15.20117,15.20117l-15.20117,15.20117l10.13411,10.13411l15.20117,-15.20117l15.20117,15.20117l10.13411,-10.13411l-15.20117,-15.20117l15.20117,-15.20117l-10.13411,-10.13411l-15.20117,15.20117z\"></path></g></g></svg>          \r\n${follow} subscribers\r\n          </div>\r\n      </a>\r\n       \r\n      </div>\r\n        `\r\n    })\r\n    output += '</div>';\r\n    document.getElementById('results').innerHTML = output;      \r\n    })\r\n    \r\n});\r\n\r\n})\r\n\r\n//show message\r\nconst showMessage = (message, className) =>{\r\nconst div = document.createElement('div');\r\ndiv.className=`\r\nalert ${className}\r\n`;\r\ndiv.appendChild(document.createTextNode(message));\r\n\r\nconst searchContainer = document.getElementById('search-container');\r\n\r\nconst search = document.getElementById('search');\r\n\r\nsearchContainer.insertBefore(div, search);\r\n\r\nsetTimeout(() => document.querySelector('.alert').remove(), 3000)\r\n\r\n}\r\n\r\n\r\nconst truncateText = (text, limit) => {\r\n    const shortened = text.indexOf(' ', limit);\r\n    if(shortened === -1) return text;\r\n    return text.substring(0, shortened);\r\n}"]}